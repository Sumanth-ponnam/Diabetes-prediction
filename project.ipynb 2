{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\vamsi\\Anaconda3\\envs\\tf-gpu-cuda8\\lib\\importlib\\_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>smoking_history</th>\n",
       "      <th>bmi</th>\n",
       "      <th>HbA1c_level</th>\n",
       "      <th>blood_glucose_level</th>\n",
       "      <th>diabetes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>never</td>\n",
       "      <td>25.19</td>\n",
       "      <td>6.6</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Female</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No Info</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.6</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>never</td>\n",
       "      <td>27.32</td>\n",
       "      <td>5.7</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>current</td>\n",
       "      <td>23.45</td>\n",
       "      <td>5.0</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>76.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>current</td>\n",
       "      <td>20.14</td>\n",
       "      <td>4.8</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender   age  hypertension  heart_disease smoking_history    bmi  \\\n",
       "0  Female  80.0             0              1           never  25.19   \n",
       "1  Female  54.0             0              0         No Info  27.32   \n",
       "2    Male  28.0             0              0           never  27.32   \n",
       "3  Female  36.0             0              0         current  23.45   \n",
       "4    Male  76.0             1              1         current  20.14   \n",
       "\n",
       "   HbA1c_level  blood_glucose_level  diabetes  \n",
       "0          6.6                  140         0  \n",
       "1          6.6                   80         0  \n",
       "2          5.7                  158         0  \n",
       "3          5.0                  155         0  \n",
       "4          4.8                  155         0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data = pd.read_csv('diabetes_prediction_dataset/diabetes_prediction_dataset.csv')\n",
    "diab_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100000, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    91500\n",
       "1     8500\n",
       "Name: diabetes, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data['diabetes'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['never', 'No Info', 'current', 'former', 'ever', 'not current'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Gender is nominal\n",
    "#smoking_history is ordinal\n",
    "#age, blood_glucose_level, HbA1c_level, bmi is ratio\n",
    "diab_data['smoking_history'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "smoking_hist_mapping_dict = {\n",
    "    'No Info': 0,\n",
    "    'never': 1,\n",
    "    'former': 2, \n",
    "    'not current': 2, \n",
    "    'current': 3,\n",
    "    'ever': 4,\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "diab_data['smoking_history_transformed'] = diab_data['smoking_history'].map(smoking_hist_mapping_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gender                         False\n",
       "age                            False\n",
       "hypertension                   False\n",
       "heart_disease                  False\n",
       "smoking_history                False\n",
       "bmi                            False\n",
       "HbA1c_level                    False\n",
       "blood_glucose_level            False\n",
       "diabetes                       False\n",
       "smoking_history_transformed    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data.isnull().any() #No attribute is having null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "one_hot_encoded_gender = pd.get_dummies(diab_data[['gender']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>smoking_history</th>\n",
       "      <th>bmi</th>\n",
       "      <th>HbA1c_level</th>\n",
       "      <th>blood_glucose_level</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>smoking_history_transformed</th>\n",
       "      <th>gender_Female</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>gender_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>never</td>\n",
       "      <td>25.19</td>\n",
       "      <td>6.6</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Female</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No Info</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.6</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>never</td>\n",
       "      <td>27.32</td>\n",
       "      <td>5.7</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>current</td>\n",
       "      <td>23.45</td>\n",
       "      <td>5.0</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>76.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>current</td>\n",
       "      <td>20.14</td>\n",
       "      <td>4.8</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99995</th>\n",
       "      <td>Female</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No Info</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.2</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99996</th>\n",
       "      <td>Female</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No Info</td>\n",
       "      <td>17.37</td>\n",
       "      <td>6.5</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99997</th>\n",
       "      <td>Male</td>\n",
       "      <td>66.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>former</td>\n",
       "      <td>27.83</td>\n",
       "      <td>5.7</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99998</th>\n",
       "      <td>Female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>never</td>\n",
       "      <td>35.42</td>\n",
       "      <td>4.0</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99999</th>\n",
       "      <td>Female</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>current</td>\n",
       "      <td>22.43</td>\n",
       "      <td>6.6</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100000 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       gender   age  hypertension  heart_disease smoking_history    bmi  \\\n",
       "0      Female  80.0             0              1           never  25.19   \n",
       "1      Female  54.0             0              0         No Info  27.32   \n",
       "2        Male  28.0             0              0           never  27.32   \n",
       "3      Female  36.0             0              0         current  23.45   \n",
       "4        Male  76.0             1              1         current  20.14   \n",
       "...       ...   ...           ...            ...             ...    ...   \n",
       "99995  Female  80.0             0              0         No Info  27.32   \n",
       "99996  Female   2.0             0              0         No Info  17.37   \n",
       "99997    Male  66.0             0              0          former  27.83   \n",
       "99998  Female  24.0             0              0           never  35.42   \n",
       "99999  Female  57.0             0              0         current  22.43   \n",
       "\n",
       "       HbA1c_level  blood_glucose_level  diabetes  \\\n",
       "0              6.6                  140         0   \n",
       "1              6.6                   80         0   \n",
       "2              5.7                  158         0   \n",
       "3              5.0                  155         0   \n",
       "4              4.8                  155         0   \n",
       "...            ...                  ...       ...   \n",
       "99995          6.2                   90         0   \n",
       "99996          6.5                  100         0   \n",
       "99997          5.7                  155         0   \n",
       "99998          4.0                  100         0   \n",
       "99999          6.6                   90         0   \n",
       "\n",
       "       smoking_history_transformed  gender_Female  gender_Male  gender_Other  \n",
       "0                                1              1            0             0  \n",
       "1                                0              1            0             0  \n",
       "2                                1              0            1             0  \n",
       "3                                3              1            0             0  \n",
       "4                                3              0            1             0  \n",
       "...                            ...            ...          ...           ...  \n",
       "99995                            0              1            0             0  \n",
       "99996                            0              1            0             0  \n",
       "99997                            2              0            1             0  \n",
       "99998                            1              1            0             0  \n",
       "99999                            3              1            0             0  \n",
       "\n",
       "[100000 rows x 13 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data = pd.concat([diab_data, one_hot_encoded_gender], axis=1)\n",
    "diab_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "diab_data.drop(labels=['gender', 'smoking_history'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>bmi</th>\n",
       "      <th>HbA1c_level</th>\n",
       "      <th>blood_glucose_level</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>smoking_history_transformed</th>\n",
       "      <th>gender_Female</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>gender_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>25.19</td>\n",
       "      <td>6.6</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.6</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.32</td>\n",
       "      <td>5.7</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.45</td>\n",
       "      <td>5.0</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20.14</td>\n",
       "      <td>4.8</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99995</th>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.2</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99996</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17.37</td>\n",
       "      <td>6.5</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99997</th>\n",
       "      <td>66.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.83</td>\n",
       "      <td>5.7</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99998</th>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.42</td>\n",
       "      <td>4.0</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99999</th>\n",
       "      <td>57.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22.43</td>\n",
       "      <td>6.6</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100000 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age  hypertension  heart_disease    bmi  HbA1c_level  \\\n",
       "0      80.0             0              1  25.19          6.6   \n",
       "1      54.0             0              0  27.32          6.6   \n",
       "2      28.0             0              0  27.32          5.7   \n",
       "3      36.0             0              0  23.45          5.0   \n",
       "4      76.0             1              1  20.14          4.8   \n",
       "...     ...           ...            ...    ...          ...   \n",
       "99995  80.0             0              0  27.32          6.2   \n",
       "99996   2.0             0              0  17.37          6.5   \n",
       "99997  66.0             0              0  27.83          5.7   \n",
       "99998  24.0             0              0  35.42          4.0   \n",
       "99999  57.0             0              0  22.43          6.6   \n",
       "\n",
       "       blood_glucose_level  diabetes  smoking_history_transformed  \\\n",
       "0                      140         0                            1   \n",
       "1                       80         0                            0   \n",
       "2                      158         0                            1   \n",
       "3                      155         0                            3   \n",
       "4                      155         0                            3   \n",
       "...                    ...       ...                          ...   \n",
       "99995                   90         0                            0   \n",
       "99996                  100         0                            0   \n",
       "99997                  155         0                            2   \n",
       "99998                  100         0                            1   \n",
       "99999                   90         0                            3   \n",
       "\n",
       "       gender_Female  gender_Male  gender_Other  \n",
       "0                  1            0             0  \n",
       "1                  1            0             0  \n",
       "2                  0            1             0  \n",
       "3                  1            0             0  \n",
       "4                  0            1             0  \n",
       "...              ...          ...           ...  \n",
       "99995              1            0             0  \n",
       "99996              1            0             0  \n",
       "99997              0            1             0  \n",
       "99998              1            0             0  \n",
       "99999              1            0             0  \n",
       "\n",
       "[100000 rows x 11 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>bmi</th>\n",
       "      <th>HbA1c_level</th>\n",
       "      <th>blood_glucose_level</th>\n",
       "      <th>smoking_history_transformed</th>\n",
       "      <th>gender_Female</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>gender_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>25.19</td>\n",
       "      <td>6.6</td>\n",
       "      <td>140</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.6</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.32</td>\n",
       "      <td>5.7</td>\n",
       "      <td>158</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.45</td>\n",
       "      <td>5.0</td>\n",
       "      <td>155</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20.14</td>\n",
       "      <td>4.8</td>\n",
       "      <td>155</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99995</th>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.32</td>\n",
       "      <td>6.2</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99996</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17.37</td>\n",
       "      <td>6.5</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99997</th>\n",
       "      <td>66.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.83</td>\n",
       "      <td>5.7</td>\n",
       "      <td>155</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99998</th>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.42</td>\n",
       "      <td>4.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99999</th>\n",
       "      <td>57.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22.43</td>\n",
       "      <td>6.6</td>\n",
       "      <td>90</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age  hypertension  heart_disease    bmi  HbA1c_level  \\\n",
       "0      80.0             0              1  25.19          6.6   \n",
       "1      54.0             0              0  27.32          6.6   \n",
       "2      28.0             0              0  27.32          5.7   \n",
       "3      36.0             0              0  23.45          5.0   \n",
       "4      76.0             1              1  20.14          4.8   \n",
       "...     ...           ...            ...    ...          ...   \n",
       "99995  80.0             0              0  27.32          6.2   \n",
       "99996   2.0             0              0  17.37          6.5   \n",
       "99997  66.0             0              0  27.83          5.7   \n",
       "99998  24.0             0              0  35.42          4.0   \n",
       "99999  57.0             0              0  22.43          6.6   \n",
       "\n",
       "       blood_glucose_level  smoking_history_transformed  gender_Female  \\\n",
       "0                      140                            1              1   \n",
       "1                       80                            0              1   \n",
       "2                      158                            1              0   \n",
       "3                      155                            3              1   \n",
       "4                      155                            3              0   \n",
       "...                    ...                          ...            ...   \n",
       "99995                   90                            0              1   \n",
       "99996                  100                            0              1   \n",
       "99997                  155                            2              0   \n",
       "99998                  100                            1              1   \n",
       "99999                   90                            3              1   \n",
       "\n",
       "       gender_Male  gender_Other  \n",
       "0                0             0  \n",
       "1                0             0  \n",
       "2                1             0  \n",
       "3                0             0  \n",
       "4                1             0  \n",
       "...            ...           ...  \n",
       "99995            0             0  \n",
       "99996            0             0  \n",
       "99997            1             0  \n",
       "99998            0             0  \n",
       "99999            0             0  \n",
       "\n",
       "[100000 rows x 10 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data_X = diab_data[['age', 'hypertension', 'heart_disease', 'bmi', 'HbA1c_level', 'blood_glucose_level', 'smoking_history_transformed', 'gender_Female', 'gender_Male', 'gender_Other']]\n",
    "diab_data_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        0\n",
       "1        0\n",
       "2        0\n",
       "3        0\n",
       "4        0\n",
       "        ..\n",
       "99995    0\n",
       "99996    0\n",
       "99997    0\n",
       "99998    0\n",
       "99999    0\n",
       "Name: diabetes, Length: 100000, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diab_data_y = diab_data['diabetes']\n",
    "diab_data_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\vamsi\\Anaconda3\\envs\\tf-gpu-cuda8\\lib\\importlib\\_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "strat_Kfold = StratifiedKFold(n_splits=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# gini_param_grid = {'decisiontreeclassifier__criterion': ['gini'], 'decisiontreeclassifier__max_depth': [(int)(10*diab_data_X.shape[1])]}\n",
    "\n",
    "# entropy_param_grid = {'decisiontreeclassifier__criterion': ['entropy'], 'decisiontreeclassifier__max_depth': [(int)(10*diab_data_X.shape[1])]}\n",
    "\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, f1_score\n",
    "\n",
    "scaler = StandardScaler()\n",
    "diab_prediction_tree_classifier = DecisionTreeClassifier()\n",
    "diab_prediction_pipeline = make_pipeline(scaler, diab_prediction_tree_classifier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Fold 0:\n",
      "  Train set indices: index=[19708 19723 19737 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[    0     1     2 ... 20032 20033 20034], 20000\n",
      "0.733371891266628 {'decisiontreeclassifier__criterion': 'gini', 'decisiontreeclassifier__max_depth': 100}\n",
      "0.726647564469914 {'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 100}\n",
      "For Fold 1:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[19708 19723 19737 ... 40058 40059 40060], 20000\n",
      "0.7215261958997722 {'decisiontreeclassifier__criterion': 'gini', 'decisiontreeclassifier__max_depth': 100}\n",
      "0.7319767441860465 {'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 100}\n",
      "For Fold 2:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[39240 39241 39278 ... 60120 60121 60122], 20000\n",
      "0.7085149665794827 {'decisiontreeclassifier__criterion': 'gini', 'decisiontreeclassifier__max_depth': 100}\n",
      "0.7119341563786008 {'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 100}\n",
      "For Fold 3:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[58937 58944 58957 ... 80024 80025 80026], 20000\n",
      "0.7274275979557069 {'decisiontreeclassifier__criterion': 'gini', 'decisiontreeclassifier__max_depth': 100}\n",
      "0.732837528604119 {'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 100}\n",
      "For Fold 4:\n",
      "  Train set indices: index=[    0     1     2 ... 80024 80025 80026], 80000\n",
      "  Test set indices:  index=[79771 79772 79809 ... 99997 99998 99999], 20000\n",
      "0.7196100917431193 {'decisiontreeclassifier__criterion': 'gini', 'decisiontreeclassifier__max_depth': 100}\n",
      "0.7334102712060011 {'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 100}\n"
     ]
    }
   ],
   "source": [
    "# from sklearn.model_selection import GridSearchCV\n",
    "# from sklearn.metrics import accuracy_score, confusion_matrix\n",
    "\n",
    "# for i, (train_index, test_index) in enumerate(strat_Kfold.split(diab_data_X, diab_data_y)):\n",
    "#   print(f\"For Fold {i}:\")\n",
    "#   print(f\"  Train set indices: index={train_index}, {len(train_index)}\")\n",
    "#   print(f\"  Test set indices:  index={test_index}, {len(test_index)}\")\n",
    "#   grid_on_fold = GridSearchCV(estimator=diab_prediction_pipeline, param_grid=gini_param_grid, cv=5, scoring='f1')\n",
    "#   grid_on_fold.fit(diab_data_X.iloc[train_index.tolist(), :], diab_data_y.iloc[train_index.tolist()])\n",
    "#   best_score_on_grid = grid_on_fold.score(diab_data_X.iloc[test_index.tolist(), :], diab_data_y.iloc[test_index.tolist()])\n",
    "#   print(best_score_on_grid, grid_on_fold.best_params_)\n",
    "#   grid_on_fold = GridSearchCV(estimator=diab_prediction_pipeline, param_grid=entropy_param_grid, cv=5, scoring='f1')\n",
    "#   grid_on_fold.fit(diab_data_X.iloc[train_index.tolist(), :], diab_data_y.iloc[train_index.tolist()])\n",
    "#   best_score_on_grid = grid_on_fold.score(diab_data_X.iloc[test_index.tolist(), :], diab_data_y.iloc[test_index.tolist()])\n",
    "#   print(best_score_on_grid, grid_on_fold.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Fold 0:\n",
      "  Train set indices: index=[19708 19723 19737 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[    0     1     2 ... 20032 20033 20034], 20000\n",
      "Accuracy obtained = 0.95385\n",
      "F1 Measure obtained = 0.7323861988982314\n",
      "[[17814   486]\n",
      " [  437  1263]]\n",
      "For Fold 1:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[19708 19723 19737 ... 40058 40059 40060], 20000\n",
      "Accuracy obtained = 0.95055\n",
      "F1 Measure obtained = 0.7191138880999717\n",
      "[[17745   555]\n",
      " [  434  1266]]\n",
      "For Fold 2:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[39240 39241 39278 ... 60120 60121 60122], 20000\n",
      "Accuracy obtained = 0.9505\n",
      "F1 Measure obtained = 0.7103569338794616\n",
      "[[17796   504]\n",
      " [  486  1214]]\n",
      "For Fold 3:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[58937 58944 58957 ... 80024 80025 80026], 20000\n",
      "Accuracy obtained = 0.9518\n",
      "F1 Measure obtained = 0.7262918796138558\n",
      "[[17757   543]\n",
      " [  421  1279]]\n",
      "For Fold 4:\n",
      "  Train set indices: index=[    0     1     2 ... 80024 80025 80026], 80000\n",
      "  Test set indices:  index=[79771 79772 79809 ... 99997 99998 99999], 20000\n",
      "Accuracy obtained = 0.95105\n",
      "F1 Measure obtained = 0.7190817790530846\n",
      "[[17768   532]\n",
      " [  447  1253]]\n",
      "Average Overall Accuracy obtained for gini index = 0.9515499999999999\n",
      "Average F1 Score obtained for gini index = 0.721446135908921\n"
     ]
    }
   ],
   "source": [
    "gini_pred_score_sum = 0\n",
    "gini_f1_score_sum = 0\n",
    "for i, (train_index, test_index) in enumerate(strat_Kfold.split(diab_data_X, diab_data_y)):\n",
    "  print(f\"For Fold {i}:\")\n",
    "  print(f\"  Train set indices: index={train_index}, {len(train_index)}\")\n",
    "  print(f\"  Test set indices:  index={test_index}, {len(test_index)}\")\n",
    "  scaler = StandardScaler()\n",
    "  diab_prediction_tree_classifier = DecisionTreeClassifier(criterion='gini', max_depth=(int)(10*diab_data_X.shape[1]))\n",
    "  diab_prediction_pipeline = make_pipeline(scaler, diab_prediction_tree_classifier)\n",
    "  diab_prediction_pipeline.fit(diab_data_X.iloc[train_index.tolist(), :], diab_data_y.iloc[train_index.tolist()])\n",
    "  y_pred = diab_prediction_pipeline.predict(diab_data_X.iloc[test_index.tolist(), :])\n",
    "  y_pred_score = accuracy_score(y_true=diab_data_y.iloc[test_index.tolist()], y_pred=y_pred)\n",
    "  y_pred_f1_score = f1_score(y_true=diab_data_y.iloc[test_index.tolist()], y_pred=y_pred)\n",
    "  gini_pred_score_sum += y_pred_score\n",
    "  gini_f1_score_sum += y_pred_f1_score\n",
    "  print(f'Accuracy obtained = {y_pred_score}')\n",
    "  print(f'F1 Measure obtained = {y_pred_f1_score}')\n",
    "  print(confusion_matrix(y_true=diab_data_y.iloc[test_index.tolist()], y_pred=y_pred))\n",
    "\n",
    "print(f'Average Overall Accuracy obtained for gini index = {gini_pred_score_sum/strat_Kfold.get_n_splits()}')\n",
    "print(f'Average F1 Score obtained for gini index = {gini_f1_score_sum/strat_Kfold.get_n_splits()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Fold 0:\n",
      "  Train set indices: index=[19708 19723 19737 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[    0     1     2 ... 20032 20033 20034], 20000\n",
      "Accuracy obtained = 0.95285\n",
      "F1 Measure obtained = 0.727849927849928\n",
      "[[17796   504]\n",
      " [  439  1261]]\n",
      "For Fold 1:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[19708 19723 19737 ... 40058 40059 40060], 20000\n",
      "Accuracy obtained = 0.95325\n",
      "F1 Measure obtained = 0.7289069295447956\n",
      "[[17808   492]\n",
      " [  443  1257]]\n",
      "For Fold 2:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[39240 39241 39278 ... 60120 60121 60122], 20000\n",
      "Accuracy obtained = 0.95155\n",
      "F1 Measure obtained = 0.7147483073299971\n",
      "[[17817   483]\n",
      " [  486  1214]]\n",
      "For Fold 3:\n",
      "  Train set indices: index=[    0     1     2 ... 99997 99998 99999], 80000\n",
      "  Test set indices:  index=[58937 58944 58957 ... 80024 80025 80026], 20000\n",
      "Accuracy obtained = 0.9538\n",
      "F1 Measure obtained = 0.7347876004592422\n",
      "[[17796   504]\n",
      " [  420  1280]]\n",
      "For Fold 4:\n",
      "  Train set indices: index=[    0     1     2 ... 80024 80025 80026], 80000\n",
      "  Test set indices:  index=[79771 79772 79809 ... 99997 99998 99999], 20000\n",
      "Accuracy obtained = 0.9536\n",
      "F1 Measure obtained = 0.7324106113033447\n",
      "[[17802   498]\n",
      " [  430  1270]]\n",
      "Average Overall Accuracy obtained for entropy measure = 0.9530099999999999\n",
      "Average F1 Score obtained for entropy measure = 0.7277406752974616\n"
     ]
    }
   ],
   "source": [
    "entropy_pred_score_sum = 0\n",
    "entropy_f1_score_sum = 0\n",
    "for i, (train_index, test_index) in enumerate(strat_Kfold.split(diab_data_X, diab_data_y)):\n",
    "  print(f\"For Fold {i}:\")\n",
    "  print(f\"  Train set indices: index={train_index}, {len(train_index)}\")\n",
    "  print(f\"  Test set indices:  index={test_index}, {len(test_index)}\")\n",
    "  scaler = StandardScaler()\n",
    "  diab_prediction_tree_classifier = DecisionTreeClassifier(criterion='entropy', max_depth=(int)(10*diab_data_X.shape[1]))\n",
    "  diab_prediction_pipeline = make_pipeline(scaler, diab_prediction_tree_classifier)\n",
    "  diab_prediction_pipeline.fit(diab_data_X.iloc[train_index.tolist(), :], diab_data_y.iloc[train_index.tolist()])\n",
    "  y_pred = diab_prediction_pipeline.predict(diab_data_X.iloc[test_index.tolist(), :])\n",
    "  y_pred_score = accuracy_score(y_true=diab_data_y.iloc[test_index.tolist()], y_pred=y_pred)\n",
    "  y_pred_f1_score = f1_score(y_true=diab_data_y.iloc[test_index.tolist()], y_pred=y_pred)\n",
    "  entropy_pred_score_sum += y_pred_score\n",
    "  entropy_f1_score_sum += y_pred_f1_score\n",
    "  print(f'Accuracy obtained = {y_pred_score}')\n",
    "  print(f'F1 Measure obtained = {y_pred_f1_score}')\n",
    "  print(confusion_matrix(y_true=diab_data_y.iloc[test_index.tolist()], y_pred=y_pred))\n",
    "\n",
    "print(f'Average Overall Accuracy obtained for entropy measure = {entropy_pred_score_sum/strat_Kfold.get_n_splits()}')\n",
    "print(f'Average F1 Score obtained for entropy measure = {entropy_f1_score_sum/strat_Kfold.get_n_splits()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Considering F1-Measure as well, due to the imbalance in the dataset. \n",
    "As observed there are 91500 negative class samples, and only 8500 positive class samples.\n",
    "When checked both Overall Accuracy and F1 score, the model that is trained with \"Entropy\" as impurity measure performed slightly better with test data.\n",
    "Overall average accuracy when Entropy is used = 0.953, and when Gini index is used = 0.9515\n",
    "Average F1 score when Entropy is used = 0.7277, and when Gini index is used = 0.72144\n",
    "'''"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tf-gpu-cuda8",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
